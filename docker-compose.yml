services:
  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dexian-backend-app
    restart: unless-stopped
    ports:
      - "8081:8081"
    profiles:
      - production
      - full-stack
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=8081
      - MONGODB_URI=mongodb://mongodb:27017/dexian-backend
      - TICKET_DATABASE_URL=mongodb://mongodb:27017/dexian-rca-local
      - SUPERTOKENS_CONNECTION_URI=http://supertokens:3567
      - POSTGRES_USER=${POSTGRES_USER:-supertokens}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-supertokens123}
      - POSTGRES_DB=${POSTGRES_DB:-supertokens}
      - QDRANT_URL=http://qdrant:6333
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3001}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3001}
      # Add other environment variables from your .env file
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - EMAIL_SERVICE=${EMAIL_SERVICE:-gmail}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - SERVICENOW_INSTANCE_URL=${SERVICENOW_INSTANCE_URL}
      - SERVICENOW_USERNAME=${SERVICENOW_USERNAME}
      - SERVICENOW_PASSWORD=${SERVICENOW_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-secret-key}
      - JWT_SECRET=${JWT_SECRET:-change-this-jwt-secret}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      supertokens:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - dexian-backend-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: dexian-backend-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - dexian-backend-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  # redis:
  #   image: redis:7.2-alpine
  #   container_name: dexian-backend-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - dexian-backend-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # SuperTokens Core
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:7.0
    container_name: dexian-backend-supertokens
    restart: unless-stopped
    environment:
      POSTGRESQL_CONNECTION_URI: postgresql://${POSTGRES_USER:-supertokens}:${POSTGRES_PASSWORD:-supertokens123}@postgres:5432/${POSTGRES_DB:-supertokens}
    ports:
      - "3567:3567"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dexian-backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3567/hello"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for SuperTokens
  postgres:
    image: postgres:15-alpine
    container_name: dexian-backend-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-supertokens}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supertokens123}
      POSTGRES_DB: ${POSTGRES_DB:-supertokens}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dexian-backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-supertokens}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Azure Storage Emulator (Azurite)
  # azurite:
  #   image: mcr.microsoft.com/azure-storage/azurite:latest
  #   container_name: dexian-backend-azurite
  #   restart: unless-stopped
  #   command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --location /workspace --debug /workspace/debug.log
  #   ports:
  #     - "10000:10000"  # Blob service
  #     - "10001:10001"  # Queue service
  #     - "10002:10002"  # Table service
  #   volumes:
  #     - azurite_data:/workspace
  #   networks:
  #     - dexian-backend-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:10000/devstoreaccount1 || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s

  # AWS S3 LocalStack (for local S3 development)
  # localstack:
  #   image: localstack/localstack:latest
  #   container_name: dexian-backend-localstack
  #   restart: unless-stopped
  #   environment:
  #     SERVICES: s3
  #     DEBUG: 1
  #     DATA_DIR: /tmp/localstack/data
  #     DOCKER_HOST: unix:///var/run/docker.sock
  #     AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
  #     AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
  #     AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
  #     PERSISTENCE: 1
  #   ports:
  #     - "4566:4566"  # LocalStack
  #   volumes:
  #     - localstack_data:/tmp/localstack
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - dexian-backend-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:4566/_localstack/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: dexian-backend-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - dexian-backend-network
    healthcheck:
      test: ["CMD", "timeout", "10s", "bash", "-c", ":> /dev/tcp/127.0.0.1/6333"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s



volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  azurite_data:
    driver: local
  localstack_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  dexian-backend-network:
    driver: bridge
